Service是一个在后台执行长时间运行操作的应用组件。可以由其它组件启动，组件通过绑定与Service交互。

Service基本分为两种形式：启动与绑定。

启动：当应用组件（如Activity）通过调用startService()启动服务时，即是“启动”状态。可以无限期运行。通常是执行单一操作，而且不会将结果返回给调用方。

绑定：当应用组件通过调用bindService()绑定到服务时，服务即处于“绑定”状态。绑定服务提供了一个客户端-服务器接口，允许组件与服务进行交互、发送请求、获取结果，甚至是利用进程间通信(IPC)跨进程执行这些操作。仅当与另一个应用组件绑定时，绑定服务才会运行。多个组件可以同时绑定到该服务，但全部取消绑定后，该服务即会被销毁。

Service可以同时以这两种方式运行，只需要实现对应的回调方法：onStartCommand()和onBind().

Service可以通过Intent调用，也可以设置为私有（通过exported或permission属性）。

Service在其托管进程的主线程中运行，所以在执行任何CPU密集型工作或阻止性操作时，应该新建线程。

Service的重要回调方法onStartCommand(),onBind(),onCreate(),onDestroy()

onStartCommand() 其它组件通过startService()启动Service时，系统调用此方法。执行之后，将无限期运行。可通过stopSelf()（Service自己调用）或stopService()（其它Context组件调用）来停止服务。

onBind() 当另一个组件通过调用bindService()与服务绑定时，系统调用此方法。需要返回一个IBinder来进行通信。返回null表示不希望允许绑定。

onCreate() 首次创建服务时，系统将调用此方法。

onDestroy() 销毁服务，应该在这个方法里清理资源。

如果是启动型服务，在资源不足时会终止，当资源再次可用，系统便会重启服务。

声明服务：在<application>中声明<service>，为了确保应用的安全性，请始终使用显式 Intent 启动或绑定 Service，且不要为服务声明 Intent 过滤器。

创建启动服务

Service
这是适用于所有服务的基类。扩展此类时，必须创建一个用于执行所有服务工作的新线程，因为默认情况下，服务将使用应用的主线程，这会降低应用正在运行的所有 Activity 的性能。

IntentService
这是 Service 的子类，它使用工作线程逐一处理所有启动请求。只需实现 onHandleIntent() 方法即可。该类主要使用HandlerThread 与 Handler 来处理逻辑。

通过继承Service，在onStartCommand()方法中进行业务处理。onCreate()会最先运行，可以在里面做一些初始化操作。

onStartCommand()的返回值用于描述系统应该如何在服务中智的情况下继续运行服务。有以下三种：

START_NOT_STICKY
除非有刮起Intent要传递，否则系统不会重建服务。

START_STICKY
系统会重建服务并调用onStartCommand()，如果有挂起Intent，则传递这些Intent，没有则传null。需要检查null值。

















































































































